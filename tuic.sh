#!/bin/bash
# TUIC v5 Pterodactyl ÂÆåÁæé‰ºòÂåñÁâà v3.0.0
# ÁâπÊÄß: Èõ∂Êó•ÂøóËæìÂá∫ + Ëá™Âä®ÈÖçÁΩÆ + Â¢ûÂº∫ÂÆâÂÖ®ÊÄß
set -euo pipefail

# ==================== ÈÖçÁΩÆÂå∫ ====================
readonly WORKDIR="/home/container/tuic"
readonly MASQ_DOMAIN="${MASQ_DOMAIN:-www.bing.com}"
readonly SERVER_TOML="server.toml"
readonly CERT_PEM="tuic-cert.pem"
readonly KEY_PEM="tuic-key.pem"
readonly LINK_TXT="tuic_link.txt"
readonly TUIC_BIN="tuic-server"

# ==================== ÈùôÈªòÊó•Âøó (Âè™ËæìÂá∫ÂÖ≥ÈîÆ‰ø°ÊÅØ) ====================
log_silent() {
    # ÂÆåÂÖ®ÈùôÈªò,‰∏çËæìÂá∫‰ªª‰ΩïÂÜÖÂÆπ
    return 0
}

log_info() {
    # Âè™Âú®ÂàùÂßãÂåñÊó∂ËæìÂá∫ÂÖ≥ÈîÆ‰ø°ÊÅØ
    if [[ "${SHOW_INIT_LOG:-0}" == "1" ]]; then
        echo "$*" >&2
    fi
}

# ==================== ÁéØÂ¢ÉÂèòÈáèÂ§ÑÁêÜ ====================
check_env_vars() {
    if [[ $# -ge 1 && -n "${1:-}" ]]; then
        TUIC_PORT="$1"
        return 0
    fi
    
    if [[ -n "${TUIC_PORT:-}" ]]; then
        return 0
    fi
    
    if [[ -n "${SERVER_PORT:-}" ]]; then
        TUIC_PORT="$SERVER_PORT"
        return 0
    fi
    
    # ÈªòËÆ§Á´ØÂè£
    TUIC_PORT="8443"
    return 0
}

# ==================== Âä†ËΩΩÂ∑≤ÊúâÈÖçÁΩÆ ====================
load_existing_config() {
    if [[ -f "$WORKDIR/$SERVER_TOML" ]]; then
        cd "$WORKDIR"
        TUIC_PORT=$(grep '^server =' "$SERVER_TOML" 2>/dev/null | sed -E 's/.*:(.*)\"/\1/' || echo "8443")
        TUIC_UUID=$(grep '^\[users\]' -A1 "$SERVER_TOML" 2>/dev/null | tail -n1 | awk '{print $1}' || echo "")
        TUIC_PASSWORD=$(grep '^\[users\]' -A1 "$SERVER_TOML" 2>/dev/null | tail -n1 | awk -F'"' '{print $2}' || echo "")
        
        if [[ -n "$TUIC_UUID" && -n "$TUIC_PASSWORD" ]]; then
            return 0
        fi
    fi
    return 1
}

# ==================== ËØÅ‰π¶ÁîüÊàê (ÈùôÈªò) ====================
generate_cert() {
    if [[ -f "$WORKDIR/$CERT_PEM" && -f "$WORKDIR/$KEY_PEM" ]]; then
        return
    fi
    
    openssl req -x509 -newkey ec -pkeyopt ec_paramgen_curve:prime256v1 \
        -keyout "$WORKDIR/$KEY_PEM" \
        -out "$WORKDIR/$CERT_PEM" \
        -subj "/CN=${MASQ_DOMAIN}" \
        -days 3650 -nodes >/dev/null 2>&1 || exit 1
    
    chmod 600 "$WORKDIR/$KEY_PEM"
    chmod 644 "$WORKDIR/$CERT_PEM"
}

# ==================== ‰∏ãËΩΩ TUIC Server (ÈùôÈªò) ====================
download_tuic_server() {
    if [[ -x "$WORKDIR/$TUIC_BIN" ]]; then
        return
    fi
    
    local arch
    arch=$(uname -m)
    
    local tuic_url
    case "$arch" in
        x86_64)
            tuic_url="https://github.com/Itsusinn/tuic/releases/download/v1.3.5/tuic-server-x86_64-linux"
            ;;
        aarch64)
            tuic_url="https://github.com/Itsusinn/tuic/releases/download/v1.3.5/tuic-server-aarch64-linux"
            ;;
        *)
            exit 1
            ;;
    esac
    
    curl -L -f --connect-timeout 30 --max-time 300 -o "$WORKDIR/$TUIC_BIN" "$tuic_url" >/dev/null 2>&1 || exit 1
    chmod +x "$WORKDIR/$TUIC_BIN"
}

# ==================== ÁîüÊàêÈÖçÁΩÆÊñá‰ª∂ (Â¢ûÂº∫ÂÆâÂÖ®ÊÄß) ====================
generate_config() {
    local rest_secret
    rest_secret=$(openssl rand -hex 32 2>/dev/null || echo "$(date +%s)$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)")
    
    cat > "$WORKDIR/$SERVER_TOML" <<EOF
# TUIC v5 È´òÊÄßËÉΩÈÖçÁΩÆ - ‰ºòÂåñÂÆâÂÖ®ÊÄßÂíåÈöêÂåøÊÄß
log_level = "off"
server = "0.0.0.0:${TUIC_PORT}"

udp_relay_ipv6 = false
zero_rtt_handshake = true
dual_stack = false
auth_timeout = "15s"
task_negotiation_timeout = "10s"
gc_interval = "30s"
gc_lifetime = "60s"
max_external_packet_size = 1500

[users]
${TUIC_UUID} = "${TUIC_PASSWORD}"

[tls]
self_sign = false
certificate = "$CERT_PEM"
private_key = "$KEY_PEM"
alpn = ["h3", "h2", "http/1.1"]

[restful]
addr = "127.0.0.1:$((TUIC_PORT + 10000))"
secret = "$rest_secret"
maximum_clients_per_user = 999999999

[quic]
initial_mtu = 1500
min_mtu = 1200
gso = true
pmtu = true
send_window = 67108864
receive_window = 33554432
max_idle_time = "60s"

[quic.congestion_control]
controller = "bbr"
initial_window = 8388608
EOF
}

# ==================== Ëé∑ÂèñÊúçÂä°Âô® IP (ÈùôÈªò) ====================
get_server_ip() {
    local ip
    ip=$(curl -s --connect-timeout 3 https://api.ipify.org 2>/dev/null || \
         curl -s --connect-timeout 3 https://ifconfig.me 2>/dev/null || \
         echo "YOUR_SERVER_IP")
    echo "$ip"
}

# ==================== ÁîüÊàêËøûÊé•ÈìæÊé• (‰øÆÂ§ç allowInsecure) ====================
generate_link() {
    local ip="$1"
    
    # ÂÖ≥ÈîÆ‰øÆÂ§ç: allowInsecure=1 (‰∏çÊòØ allow_insecure)
    local tuic_link="tuic://${TUIC_UUID}:${TUIC_PASSWORD}@${ip}:${TUIC_PORT}?congestion_control=bbr&alpn=h3&allowInsecure=1&sni=${MASQ_DOMAIN}&udp_relay_mode=native&disable_sni=0&reduce_rtt=1#TUIC-${ip}"
    
    cat > "$WORKDIR/$LINK_TXT" <<EOF
=== TUIC v5 ËäÇÁÇπ‰ø°ÊÅØ ===
ÁîüÊàêÊó∂Èó¥: $(date '+%Y-%m-%d %H:%M:%S')

ËøûÊé•Â≠óÁ¨¶‰∏≤:
$tuic_link

ÊâãÂä®ÈÖçÁΩÆÂèÇÊï∞:
  ÂçèËÆÆ: TUIC v5
  ÊúçÂä°Âô®: $ip
  Á´ØÂè£: $TUIC_PORT
  UUID: $TUIC_UUID
  ÂØÜÁ†Å: $TUIC_PASSWORD
  SNI: $MASQ_DOMAIN
  ALPN: h3, h2, http/1.1
  Êã•Â°ûÊéßÂà∂: BBR
  Ë∑≥ËøáËØÅ‰π¶È™åËØÅ: ÊòØ (allowInsecure=1)

ÊîØÊåÅÂÆ¢Êà∑Á´Ø:
  - v2rayN (ÊúÄÊñ∞Áâà, Êé®Ëçê)
  - NekoRay
  - Clash Meta (Premium Ê†∏ÂøÉ)
  - sing-box

ÊÄßËÉΩ‰ºòÂåñËØ¥Êòé:
  - ÂèëÈÄÅÁ™óÂè£: 64MB (È´òÂ∏¶ÂÆΩ‰ºòÂåñ)
  - Êé•Êî∂Á™óÂè£: 32MB
  - ÂàùÂßãÊã•Â°ûÁ™óÂè£: 8MB
  - Á©∫Èó≤Ë∂ÖÊó∂: 60s (Á®≥ÂÆöÊÄß‰ºòÂåñ)
  
ÂÆâÂÖ®ÊÄßÂ¢ûÂº∫:
  - ALPN ‰º™Ë£Ö: h3, h2, http/1.1 (Ê®°ÊãüÊ≠£Â∏∏ÊµÅÈáè)
  - ËÆ§ËØÅË∂ÖÊó∂: 15s (Èò≤Êö¥ÂäõÁ†¥Ëß£)
  - Èõ∂Êó•ÂøóÊ®°Âºè (log_level = off)
  - ÈöèÊú∫Âåñ RESTful ÂØÜÈí•

Ê≥®ÊÑè‰∫ãÈ°π:
  1. ËäÇÁÇπÈìæÊé•Â∑≤Ëá™Âä®ÈÖçÁΩÆ allowInsecure=1
  2. v2rayN ‰∏≠Êó†ÈúÄÊâãÂä®‰øÆÊîπ,Áõ¥Êé•ÂØºÂÖ•Âç≥ÂèØ
  3. Â¶ÇÈÅáËøûÊé•ÈóÆÈ¢ò,ËØ∑Ê£ÄÊü•ÊúçÂä°Âô®Á´ØÂè£ÊòØÂê¶ÂºÄÊîæ
  4. Âª∫ËÆÆ‰ΩøÁî®ÊúÄÊñ∞ÁâàÂÆ¢Êà∑Á´Ø‰ª•Ëé∑ÂæóÊúÄ‰Ω≥ÊÄßËÉΩ
EOF
    
    # Âè™ËæìÂá∫ËøûÊé•Â≠óÁ¨¶‰∏≤,ÂÖ∂‰ªñ‰ø°ÊÅØÈùôÈªò
    echo "$tuic_link"
}

# ==================== ‰∏ªÊµÅÁ®ã ====================
main() {
    # ÂàùÂßãÂåñ
    mkdir -p "$WORKDIR"
    cd "$WORKDIR"
    
    # Ê£ÄÊü•ÊòØÂê¶È¶ñÊ¨°ËøêË°å
    local is_first_run=0
    if ! load_existing_config; then
        is_first_run=1
        SHOW_INIT_LOG=1
        
        log_info "‚öôÔ∏è  TUIC v5 ÂàùÂßãÂåñ‰∏≠..."
        
        check_env_vars "$@"
        
        # ÁîüÊàêÈöèÊú∫Âá≠ËØÅ
        if command -v uuidgen >/dev/null 2>&1; then
            TUIC_UUID="$(uuidgen)"
        else
            TUIC_UUID="$(cat /proc/sys/kernel/random/uuid 2>/dev/null || openssl rand -hex 16)"
        fi
        TUIC_PASSWORD="$(openssl rand -base64 24 | tr -d '/+=' | head -c 16)"
        
        log_info "üîë UUID: $TUIC_UUID"
        log_info "üîë ÂØÜÁ†Å: $TUIC_PASSWORD"
        log_info "üéØ SNI: $MASQ_DOMAIN"
        log_info ""
    fi
    
    # ÈùôÈªòÊâßË°åÊâÄÊúâËÆæÁΩÆ
    generate_cert
    download_tuic_server
    generate_config
    
    # ÁîüÊàêËøûÊé•‰ø°ÊÅØ
    local server_ip
    server_ip=$(get_server_ip)
    local tuic_link
    tuic_link=$(generate_link "$server_ip")
    
    # Âè™Âú®È¶ñÊ¨°ËøêË°åÊó∂ÊòæÁ§∫ÂÆåÊï¥‰ø°ÊÅØ
    if [[ $is_first_run -eq 1 ]]; then
        log_info "==========================================="
        log_info "‚úÖ TUIC ÈÉ®ÁΩ≤ÂÆåÊàê!"
        log_info "==========================================="
        log_info ""
        log_info "üì± ËäÇÁÇπËøûÊé•Â≠óÁ¨¶‰∏≤:"
        log_info "$tuic_link"
        log_info ""
        log_info "üìÑ ËØ¶ÁªÜ‰ø°ÊÅØÂ∑≤‰øùÂ≠òËá≥: $WORKDIR/$LINK_TXT"
        log_info ""
        log_info "‚ö†Ô∏è  ÈáçË¶Å: Â∑≤Ëá™Âä®ÈÖçÁΩÆ allowInsecure=1"
        log_info "   v2rayN ÂØºÂÖ•ÂêéÊó†ÈúÄ‰øÆÊîπ‰ªª‰ΩïËÆæÁΩÆ"
        log_info ""
        log_info "üöÄ ÊúçÂä°ÂêØÂä®‰∏≠,ÊéßÂà∂Âè∞Â∞Ü‰øùÊåÅÈùôÈªò..."
        log_info "==========================================="
        log_info ""
    fi
    
    # ÂêØÂä®ÊúçÂä° (ÂÆåÂÖ®ÈùôÈªò,Â∏¶Ëá™Âä®ÈáçÂêØ)
    while true; do
        "$WORKDIR/$TUIC_BIN" -c "$WORKDIR/$SERVER_TOML" >/dev/null 2>&1 || {
            sleep 3
        }
    done
}

# ==================== ÂÖ•Âè£ÁÇπ ====================
main "$@"
